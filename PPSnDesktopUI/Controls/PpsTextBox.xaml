<!--
Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
European Commission - subsequent versions of the EUPL(the "Licence"); You may
not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at:
http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software distributed
under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
specific language governing permissions and limitations under the Licence.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:sys="clr-namespace:System;assembly=mscorlib"
					xmlns:pps="clr-namespace:TecWare.PPSn.Controls">

	<ControlTemplate x:Key="PpsTextBoxValidationTemplate">
		<Grid>
			<pps:PpsGeometryImage GeometryName="warning"
								  GeometryCircled="False"
								  Foreground="DarkGoldenrod"
								  Width="19"
								  Height="19"
								  HorizontalAlignment="Left"
								  VerticalAlignment="Top"
								  Margin="4,2,0,0"
								  Opacity=".75"/>
			<AdornedElementPlaceholder />
		</Grid>
	</ControlTemplate>

	<ContextMenu x:Key="PpsTextBoxContextMenu">
		<MenuItem Command="{x:Static ApplicationCommands.Cut}" />
		<MenuItem Command="{x:Static ApplicationCommands.Copy}" />
		<MenuItem Command="{x:Static ApplicationCommands.Paste}" />
		<Separator />
		<MenuItem Command="{x:Static ApplicationCommands.SelectAll}" />
	</ContextMenu>

	<Style TargetType="{x:Type pps:PpsTextBox}">
		<Setter Property="ContextMenu" Value="{StaticResource PpsTextBoxContextMenu}" />
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="2,0"/>
		<Setter Property="Foreground" Value="{DynamicResource PPSnWindowForegroundBrush}"/>
		<Setter Property="Background" Value="{DynamicResource PPSnControlBackgroundBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource PPSnControlNormalBorderBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="SelectionBrush" Value="Black"/>
		<Setter Property="SelectionOpacity" Value=".25"/>
		<Setter Property="CaretBrush" Value="{DynamicResource PPSnWindowForegroundBrush}"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="MinHeight" Value="23" />
		<Setter Property="Validation.ErrorTemplate" Value="{StaticResource PpsTextBoxValidationTemplate}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pps:PpsTextBox}">
					<Border x:Name="RootBorder"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="True">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="23" />
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Button x:Name="ClearButton"
									Grid.Column="1"
									Padding="1,1,1,1"
									VerticalAlignment="Center"
									Foreground="{TemplateBinding Foreground}"
									Visibility="Collapsed"
									Command="{x:Static pps:PpsControlCommands.ClearCommand}"
									Style="{DynamicResource {x:Static pps:PpsSharedResourceKey.PpsClearContentButtonStyle}}" />
							<pps:PpsButton x:Name="DropDownButton"
										   Command="{x:Static pps:PpsTextBox.DropDownCommand}"
										   Grid.Column="2"
										   Width="23"
										   DisplayMode="Transparent"
										   GeometryName="comboxBoxChevron"
										   GeometrySize="20"
										   SnapsToDevicePixels="False"
										   Foreground="{TemplateBinding Foreground}"
										   Visibility="Collapsed" />
							<pps:PpsGeometryImage x:Name="addedImage"
												  Grid.Column="3"
												  GeometryName="{TemplateBinding AdditionalImage}"
												  GeometryCircled="False"
												  Foreground="{TemplateBinding Foreground}"
												  Opacity=".65"
												  SnapsToDevicePixels="False"
												  Margin="1,1,1,1"
												  Visibility="Collapsed" />
							<ScrollViewer x:Name="PART_ContentHost"
										  Focusable="False"
										  HorizontalScrollBarVisibility="Hidden"
										  VerticalScrollBarVisibility="Hidden" />
							<ScrollViewer x:Name="FormattedValueViewer"
										  Focusable="False"
										  HorizontalScrollBarVisibility="{Binding HorizontalScrollBarVisibility, ElementName=PART_ContentHost}"
										  VerticalScrollBarVisibility="{Binding VerticalScrollBarVisibility, ElementName=PART_ContentHost}"
										  CanContentScroll="{Binding CanContentScroll, ElementName=PART_ContentHost}"
										  Padding="{TemplateBinding Padding}"
										  Visibility="Hidden">
								<TextBlock Text="{TemplateBinding FormattedValue}"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										   TextWrapping="{TemplateBinding TextWrapping}"
										   Margin="2,0,2,0" />
							</ScrollViewer>
							<Control x:Name="RequiredInfo"
									 Grid.ColumnSpan="2"
									 Cursor="IBeam"
									 Visibility="Hidden"
									 Style="{DynamicResource {x:Static pps:PpsSharedResourceKey.PpsMandatoryFieldInfoStyle}}" />
							<Popup PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" VerticalOffset="4" HorizontalOffset="8"
								   IsOpen="{Binding HasInputError, RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" StaysOpen="False"
								   AllowsTransparency="True" PopupAnimation="None" Focusable="False">
								<Border BorderThickness="1" BorderBrush="{x:Static SystemColors.InfoTextBrush}"
										TextElement.Foreground="{x:Static SystemColors.InfoTextBrush}" Background="{x:Static SystemColors.InfoBrush}" Padding="8,4">
									<ContentPresenter Content="{Binding InputErrorMessage,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}" />
								</Border>
							</Popup>
						</Grid>
					</Border>
							
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource PPSnWindowDisabledForegroundBrush}" />
							<Setter Property="Background" Value="Transparent" />
							<Setter Property="BorderBrush" Value="{DynamicResource PPSnSeparatorBrush}" />
						</Trigger>

						<Trigger Property="IsReadOnly" Value="True">
							<Setter Property="Background" Value="Transparent" />
						</Trigger>

						<Trigger Property="AcceptsReturn" Value="True">
							<Setter Property="Padding" Value="2,2,2,0"/>
							<Setter Property="VerticalContentAlignment" Value="Top"/>
							<Setter Property="TextWrapping" Value="Wrap"/>
							<Setter TargetName="ClearButton" Property="VerticalAlignment" Value="Top"/>
						</Trigger>
					
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource PPSnControlFocusedBorderBrush}" />
							<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
						</Trigger>

						<Trigger SourceName="DropDownButton" Property="IsEnabled" Value="True">
							<Setter TargetName="DropDownButton" Property="Visibility" Value="Visible" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused" Value="True" />
								<Condition Property="AcceptsReturn" Value="False" />
								<Condition SourceName="ClearButton" Property="IsEnabled" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ClearButton" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused" Value="False" />
								<Condition Property="HasFormattedValue" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="FormattedValueViewer" Property="Visibility" Value="Visible" />
							<Setter TargetName="PART_ContentHost" Property="Visibility" Value="Hidden" />
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsNullable" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="False" />
								<Condition Property="Validation.HasError" Value="False" />
								<Condition Property="Text" Value="{x:Static sys:String.Empty}" />
							</MultiTrigger.Conditions>
							<Setter TargetName="RequiredInfo" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="HasAdditionalImage" Value="True">
							<Setter TargetName="addedImage" Property="Visibility" Value="Visible" />
						</Trigger>
												
		                <Trigger Property="Validation.HasError" Value="True">
							<Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
						</Trigger>
									
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>