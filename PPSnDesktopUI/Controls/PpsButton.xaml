<!--
Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
European Commission - subsequent versions of the EUPL(the "Licence"); You may
not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at:
http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software distributed
under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
specific language governing permissions and limitations under the Licence.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
 					xmlns:pps="clr-namespace:TecWare.PPSn.Controls">
	<ControlTemplate x:Key="PpsButtonControlTemplate" TargetType="{x:Type pps:PpsButton}">
		<Grid x:Name="RootGrid">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:.35" />
					</VisualStateGroup.Transitions>
					<VisualState Name="Normal" />
					<VisualState Name="MouseOver" />
					<VisualState Name="Pressed">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="StatusRectangle" Storyboard.TargetProperty="Opacity" To=".40">
								<DoubleAnimation.EasingFunction>
									<ExponentialEase EasingMode="EaseOut" />
								</DoubleAnimation.EasingFunction>
							</DoubleAnimation>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="OuterBorder"
					BorderThickness="{TemplateBinding BorderThickness}"
					BorderBrush="{TemplateBinding BorderBrush}"
					CornerRadius="{Binding BorderRadius, RelativeSource={RelativeSource TemplatedParent}}"
					Background="{TemplateBinding Background}"
					Padding="4,0,8,0"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
				<Grid Margin="{TemplateBinding Padding}">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" />
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<pps:PpsGeometryImage x:Name="ImageBox"
										  GeometryName="{TemplateBinding GeometryName}"
										  Width="{TemplateBinding GeometrySize}"
										  Height="{TemplateBinding GeometrySize}"
										  Margin="0,0,4,0"
										  Foreground="{TemplateBinding Foreground}" />
					<ContentPresenter x:Name="ContentSite"
									  Grid.Column="1"
									  RecognizesAccessKey="True"
									  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
				</Grid>
			</Border>
			<Rectangle x:Name="StatusRectangle"
					   StrokeThickness="0"
					   Fill="{TemplateBinding Foreground}"
					   RadiusX="{TemplateBinding BorderRadius}"
					   RadiusY="{TemplateBinding BorderRadius}"
					   IsHitTestVisible="False"
					   Opacity="0" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsTransparent" Value="True">
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="Background" Value="Transparent" />
			</Trigger>

			<Trigger Property="HasContent" Value="False">
				<Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="OuterBorder" Property="Padding" Value="0" />
				<Setter TargetName="ImageBox" Property="Margin" Value="0" />
				<Setter TargetName="ImageBox" Property="Grid.ColumnSpan" Value="2" />
			</Trigger>

			<Trigger SourceName="ImageBox" Property="HasGeometry" Value="False">
				<Setter TargetName="ImageBox" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="OuterBorder" Property="Padding" Value="8,0,8,0" />
			</Trigger>

			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="RootGrid" Property="Opacity" Value=".35" />
			</Trigger>

			<!--<EventTrigger RoutedEvent="MouseEnter">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="StatusRectangle" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0" From="0" To=".10" Duration="0:0:0"/>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>-->

			<!--<EventTrigger RoutedEvent="MouseLeave">
				<EventTrigger.Actions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="StatusRectangle" Storyboard.TargetProperty="Opacity" BeginTime="0:0:0" From=".10" To="0" Duration="0:0:0"/>
						</Storyboard>
					</BeginStoryboard>
				</EventTrigger.Actions>
			</EventTrigger>-->

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsTransparent" Value="False" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsStylusOver" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" />
			</MultiTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsTransparent" Value="False" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsStylusOver" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="StatusRectangle" Property="Opacity" Value=".04" />
			</MultiTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsTransparent" Value="True" />
					<Condition Property="IsMouseOver" Value="True" />
					<Condition Property="IsStylusOver" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="StatusRectangle" Property="Opacity" Value=".10" />
			</MultiTrigger>

			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsKeyboardFocused" Value="True" />
					<Condition Property="IsMouseCaptured" Value="False" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource PPSnControlFocusedBorderBrush}" />
			</MultiTrigger>

			<Trigger Property="IsMouseCaptured" Value="True">
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter TargetName="StatusRectangle" Property="Opacity" Value=".10" />
			</Trigger>

		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="{x:Type pps:PpsButton}">
		<Setter Property="Template" Value="{StaticResource PpsButtonControlTemplate}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<!--Touch-And-Hold-Event wird sonst auf OnMouseLeftButtonDown gemapped. Pressed State wird nicht aktiv-->
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
		<Setter Property="Foreground" Value="{DynamicResource PPSnWindowForegroundBrush}" />
		<Setter Property="Background" Value="{DynamicResource PPSnButtonBackgroundBrush}" />
		<Setter Property="BorderThickness" Value="1,1,1,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource PPSnButtonBackgroundBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
	</Style>

	<Style TargetType="{x:Type pps:PpsSplitButton}" BasedOn="{StaticResource {x:Type pps:PpsButton}}" />

	<Style TargetType="{x:Type pps:PpsToggleButton}" BasedOn="{StaticResource {x:Type pps:PpsButton}}" />

</ResourceDictionary>