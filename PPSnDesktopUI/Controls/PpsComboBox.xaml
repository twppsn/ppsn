<!--
Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
European Commission - subsequent versions of the EUPL(the "Licence"); You may
not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at:
http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software distributed
under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
specific language governing permissions and limitations under the Licence.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:sys="clr-namespace:System;assembly=mscorlib"
					xmlns:ui="clr-namespace:TecWare.PPSn.UI"
					xmlns:pps="clr-namespace:TecWare.PPSn.Controls">

	<Style TargetType="{x:Type pps:PpsComboBox}">
		<Setter Property="ScrollViewer.CanContentScroll" Value="True "/>
		<Setter Property="Foreground" Value="{DynamicResource PPSnWindowForegroundBrush}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="BorderBrush" Value="{DynamicResource PPSnControlNormalBorderBrush}" />
		<Setter Property="GeometryName" Value="comboxBoxChevron" />
		<Setter Property="Background" Value="{DynamicResource PPSnControlBackgroundBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pps:PpsComboBox}">
					<Grid>
						<pps:PpsComboBoxToggleButton x:Name="ChangeDropDownToggleButton"
													 IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
													 Padding="{TemplateBinding Padding}"
													 GeometryName="{TemplateBinding GeometryName}"
													 Background="{TemplateBinding Background}"
													 BorderThickness="{TemplateBinding BorderThickness}"
													 BorderBrush="{TemplateBinding BorderBrush}" />
						<ContentPresenter x:Name="PART_ContentPresenter"
										  Content="{TemplateBinding SelectedValueItem}" 
										  ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  ContentStringFormat="{TemplateBinding ItemStringFormat}"
										  IsHitTestVisible="False"
										  Margin="5,1,23,1"
										  VerticalAlignment="Center" />
						<Button x:Name="ClearButton"
								HorizontalAlignment="Right"
								Width="25"
								Padding="2,1,2,1"
								Margin="0,1,21,1"
								Visibility="Hidden"
								Foreground="{TemplateBinding Foreground}"
								Command="{x:Static pps:PpsControlCommands.ClearCommand}"
								Style="{DynamicResource {x:Static pps:PpsSharedResourceKey.PpsClearContentButtonStyle}}" />
						<!--ToDo Replace with PpsTextbox-->
						<TextBox x:Name="PART_EditableTextBox"
								 Margin="5,1,23,1"
								 IsReadOnly="{TemplateBinding IsReadOnly}"
								 Visibility="Hidden"
								 Background="Transparent"
								 HorizontalContentAlignment="Left"
								 VerticalContentAlignment="Center"
								 Focusable="True">
							<TextBox.Template>
								<ControlTemplate TargetType="{x:Type TextBox}" >
									<Border x:Name="PART_ContentHost" Focusable="False"/>
								</ControlTemplate>
							</TextBox.Template>
						</TextBox>
						<TextBlock x:Name="HintLabel"
								   Text="{TemplateBinding HintLabelText}"
								   Margin="7,1,0,1"
								   HorizontalAlignment="Left"
								   VerticalAlignment="Center"
								   Width="Auto"
								   IsHitTestVisible="False" 
								   Visibility="Hidden" />
						<Popup x:Name="PART_Popup"
							   Placement="Bottom"
							   VerticalOffset="1"
							   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
							   AllowsTransparency="True"
							   PopupAnimation="Slide">
							<Border Name="DropDownBorder"
									Background="{TemplateBinding Background}"
									BorderThickness="1"
									BorderBrush="{DynamicResource PPSnControlFocusedBorderBrush}"
									MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
									MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
									SnapsToDevicePixels="True">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition />
									</Grid.RowDefinitions>
									<pps:PpsTextBox x:Name="PART_FilterBox"
													Text="{Binding UserFilterText,RelativeSource={RelativeSource TemplatedParent},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged,Delay=300}"
													Height="21"
													Margin="6,6,6,6"
													Width="250"
													BorderThickness="0"
													Background="{DynamicResource PPSnWindowBackgroundBrush}"
													HorizontalAlignment="Right"
													AdditionalImage="magnify" />
									<pps:PpsScrollViewer Grid.Row="1"
														 HorizontalScrollBarVisibility="Disabled"
														 VerticalScrollBarVisibility="Auto"
														 KeyboardNavigation.DirectionalNavigation="Contained"
														 CanContentScroll="True"
														 KeyboardNavigation.TabNavigation="Once">
										<ItemsPresenter />
									</pps:PpsScrollViewer>
								</Grid>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ItemsControl.HasItems" Value="False">
							<Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="ItemsControl.IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
						<Trigger Property="ComboBox.IsEditable" Value="True">
							<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
							<Setter Property="Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
							<Setter Property="Visibility" TargetName="PART_ContentPresenter" Value="Hidden"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource PPSnWindowDisabledForegroundBrush}" />
							<Setter Property="Background" Value="Transparent" />
						</Trigger>
						<Trigger Property="IsFilterable" Value="False">
							<Setter TargetName="PART_FilterBox" Property="Visibility" Value="Collapsed" />
							<Setter  TargetName="PART_FilterBox" Property="IsEnabled" Value="False" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ComboBox.IsEditable" Value="False" />
								<Condition SourceName="ClearButton" Property="IsEnabled" Value="True" />
								<Condition Property="pps:PpsReadOnlyPaneBehavior.IsReadOnly" Value="False" />
								<Condition Property="IsClearButtonVisible" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_ContentPresenter" Property="Margin" Value="5,1,48,1" />
							<Setter TargetName="ClearButton" Property="Visibility" Value="Visible"/>
						</MultiTrigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="IsClearButtonVisible" Value="True"/>
						</Trigger>

						<Trigger Property="ComboBox.IsDropDownOpen" Value="True">
							<Setter TargetName="ClearButton" Property="IsHitTestVisible" Value="False"/>
							<Setter TargetName="ClearButton" Property="Opacity" Value=".4"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ComboBox.SelectedIndex" Value="-1" />
								<Condition Property="HasHintLabel" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="HintLabel" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						
						<Trigger Property="pps:PpsReadOnlyPaneBehavior.IsReadOnly" Value="True">
							<Setter TargetName="PART_EditableTextBox" Property="IsEnabled" Value="False" />
							<Setter Property="Background" Value="Transparent" />

							<!--<Setter TargetName="ChangeDropDownToggleButton" Property="IsEnabled" Value="False"/>-->
							<!--KeyBoard-Selection-->
							<!--<Setter Property="Focusable" Value="False"/>-->
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type pps:PpsComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Foreground" Value="{DynamicResource PPSnWindowForegroundBrush}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pps:PpsComboBoxItem}">
					<Grid>
						<Border Name="ContentBorder" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Padding="3,0" MinHeight="29">
							<ContentPresenter VerticalAlignment="Center"/>
						</Border>
						<!--custom visual focus-->
						<Rectangle x:Name="FocusRect" Stroke="{DynamicResource PPSnMarkerBrush}" StrokeThickness="1" StrokeDashArray="2 1"
								   RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Opacity="0" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="True">
							<Setter TargetName="ContentBorder" Property="Background" Value="{DynamicResource PPSnHighlightedBrush}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsHighlighted, RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding IsFilterable,RelativeSource={RelativeSource AncestorType={x:Type pps:PpsComboBox}}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="FocusRect" Property="Opacity" Value="1" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type pps:PpsComboBoxToggleButton}">
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type pps:PpsComboBoxToggleButton}">
					<Grid>
						<Border x:Name="RootBorder"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True"/>
						<pps:PpsGeometryImage x:Name="ArrowBox"
											  GeometryName="{TemplateBinding GeometryName}"
											  GeometryCircled="false"
											  HorizontalAlignment="Right"
											  Foreground="{TemplateBinding Foreground}"
											  Width="20"
											  Padding="{TemplateBinding Padding}"
											  SnapsToDevicePixels="False"
											  Margin="0,0,1,0"
											  Opacity=".5" />
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type Control}}}" Value="True">
							<Setter TargetName="RootBorder" Property="BorderBrush" Value="{DynamicResource PPSnControlFocusedBorderBrush}"/>
							<Setter TargetName="ArrowBox" Property="Opacity" Value=".65" />
						</DataTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="ArrowBox" Property="Opacity" Value=".3" />
						</Trigger>
						<Trigger Property="pps:PpsReadOnlyPaneBehavior.IsReadOnly" Value="True">
							<Setter TargetName="ArrowBox" Property="Visibility" Value="Hidden" />
							<Setter Property="IsEnabled" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>